<Shader>
    <OpenGL>
        <Vertex><![CDATA[
#version 330 core

layout(location = 0) in vec4 a_Position;
layout(location = 1) in vec2 a_UV;
out vec2 uv;

void main()
{
    uv = a_UV;
    gl_Position =  a_Position;
}
        ]]></Vertex>
        <Pixel><![CDATA[
#version 330 core

layout(location = 0) out vec4 outColor;
uniform sampler2D inputTexture;
uniform vec2 screenResolution;
uniform float power;
in vec2 uv;

void main()
{
    outColor = vec4(0.0f);
    float deltaX = 1.0f/screenResolution.x;
    float deltaY = 1.0f/screenResolution.y;
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * 4));
    outColor /= 100;
    outColor *= 500.0f * power/100.0f;
    outColor = clamp(outColor, 0.0f, 1.0f);
}

        ]]></Pixel>
    </OpenGL>
</Shader>
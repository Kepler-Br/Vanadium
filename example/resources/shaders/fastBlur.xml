<Shader>
    <OpenGL>
        <Vertex><![CDATA[
#version 330 core

layout(location = 0) in vec4 a_Position;
layout(location = 1) in vec2 a_UV;
out vec2 uv;

void main()
{
    uv = a_UV;
    gl_Position =  a_Position;
}
        ]]></Vertex>
        <Pixel><![CDATA[
#version 330 core

layout(location = 0) out vec4 outColor;
uniform sampler2D inputTexture;
uniform vec2 screenResolution;
uniform float power;
uniform float blurHue;
in vec2 uv;


// All components are in the range [0...1], including hue.
vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

// All components are in the range [0...1], including hue.
vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float normpdf(float x, float sigma)
{
	return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;
}


void main()
{
    outColor = vec4(0.0f);
    float deltaX = 1.0f/screenResolution.x;
    float deltaY = 1.0f/screenResolution.y;
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -5, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -4, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -3, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -2, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * -1, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 0, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 1, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 2, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 3, deltaY * 4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * -5));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * -4));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * -3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * -2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * -1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * 0));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * 1));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * 2));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * 3));
    outColor += texture(inputTexture, uv + vec2(deltaX * 4, deltaY * 4));
    outColor /= 100;
    outColor *= 500.0f * power/100.0f;
    outColor = clamp(outColor, 0.0f, 1.0f);
    vec3 hsv = rgb2hsv(outColor.xyz);
    hsv.x += blurHue;
    outColor = vec4(hsv2rgb(hsv), 1.0f);
}

        ]]></Pixel>
    </OpenGL>
</Shader>
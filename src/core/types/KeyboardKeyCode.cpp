#include "KeyboardKeyCode.h"

#include "core/Assert.h"
#include "core/StringHash.h"

namespace vanadium::keyboard {

std::string toString(KeyCode value) {
  switch (value) {
    case KeyCode::Unknown:
      return "Unknown";
    case KeyCode::A:
      return "A";
    case KeyCode::B:
      return "B";
    case KeyCode::C:
      return "C";
    case KeyCode::D:
      return "D";
    case KeyCode::E:
      return "E";
    case KeyCode::F:
      return "F";
    case KeyCode::G:
      return "G";
    case KeyCode::H:
      return "H";
    case KeyCode::I:
      return "I";
    case KeyCode::J:
      return "J";
    case KeyCode::K:
      return "K";
    case KeyCode::L:
      return "L";
    case KeyCode::M:
      return "M";
    case KeyCode::N:
      return "N";
    case KeyCode::O:
      return "O";
    case KeyCode::P:
      return "P";
    case KeyCode::Q:
      return "Q";
    case KeyCode::R:
      return "R";
    case KeyCode::S:
      return "S";
    case KeyCode::T:
      return "T";
    case KeyCode::U:
      return "U";
    case KeyCode::V:
      return "V";
    case KeyCode::W:
      return "W";
    case KeyCode::X:
      return "X";
    case KeyCode::Y:
      return "Y";
    case KeyCode::Z:
      return "Z";
    case KeyCode::Num_1:
      return "Num_1";
    case KeyCode::Num_2:
      return "Num_2";
    case KeyCode::Num_3:
      return "Num_3";
    case KeyCode::Num_4:
      return "Num_4";
    case KeyCode::Num_5:
      return "Num_5";
    case KeyCode::Num_6:
      return "Num_6";
    case KeyCode::Num_7:
      return "Num_7";
    case KeyCode::Num_8:
      return "Num_8";
    case KeyCode::Num_9:
      return "Num_9";
    case KeyCode::Num_0:
      return "Num_0";
    case KeyCode::Return:
      return "Return";
    case KeyCode::Escape:
      return "Escape";
    case KeyCode::Backspace:
      return "Backspace";
    case KeyCode::Tab:
      return "Tab";
    case KeyCode::Space:
      return "Space";
    case KeyCode::Minus:
      return "Minus";
    case KeyCode::Equals:
      return "Equals";
    case KeyCode::LeftBracket:
      return "LeftBracket";
    case KeyCode::RightBracket:
      return "RightBracket";
    case KeyCode::Backslash:
      return "Backslash";
    case KeyCode::Semicolon:
      return "Semicolon";
    case KeyCode::Apostrophe:
      return "Apostrophe";
    case KeyCode::Grave:
      return "Grave";
    case KeyCode::Comma:
      return "Comma";
    case KeyCode::Period:
      return "Period";
    case KeyCode::Slash:
      return "Slash";
    case KeyCode::Capslock:
      return "Capslock";
    case KeyCode::F1:
      return "F1";
    case KeyCode::F2:
      return "F2";
    case KeyCode::F3:
      return "F3";
    case KeyCode::F4:
      return "F4";
    case KeyCode::F5:
      return "F5";
    case KeyCode::F6:
      return "F6";
    case KeyCode::F7:
      return "F7";
    case KeyCode::F8:
      return "F8";
    case KeyCode::F9:
      return "F9";
    case KeyCode::F10:
      return "F10";
    case KeyCode::F11:
      return "F11";
    case KeyCode::F12:
      return "F12";
    case KeyCode::PrintScreen:
      return "PrintScreen";
    case KeyCode::ScrollLock:
      return "ScrollLock";
    case KeyCode::Pause:
      return "Pause";
    case KeyCode::Insert:
      return "Insert";
    case KeyCode::Home:
      return "Home";
    case KeyCode::PageUp:
      return "PageUp";
    case KeyCode::Delete:
      return "Delete";
    case KeyCode::End:
      return "End";
    case KeyCode::PageDown:
      return "PageDown";
    case KeyCode::Right:
      return "Right";
    case KeyCode::Left:
      return "Left";
    case KeyCode::Down:
      return "Down";
    case KeyCode::Up:
      return "Up";
    case KeyCode::NumLock:
      return "NumLock";
    case KeyCode::KP_Divide:
      return "KP_Divide";
    case KeyCode::KP_Multiply:
      return "KP_Multiply";
    case KeyCode::KP_Minus:
      return "KP_Minus";
    case KeyCode::KP_Plus:
      return "KP_Plus";
    case KeyCode::KP_Enter:
      return "KP_Enter";
    case KeyCode::KP_1:
      return "KP_1";
    case KeyCode::KP_2:
      return "KP_2";
    case KeyCode::KP_3:
      return "KP_3";
    case KeyCode::KP_4:
      return "KP_4";
    case KeyCode::KP_5:
      return "KP_5";
    case KeyCode::KP_6:
      return "KP_6";
    case KeyCode::KP_7:
      return "KP_7";
    case KeyCode::KP_8:
      return "KP_8";
    case KeyCode::KP_9:
      return "KP_9";
    case KeyCode::KP_0:
      return "KP_0";
    case KeyCode::KP_Period:
      return "KP_Period";
    case KeyCode::Application:
      return "Application";
    case KeyCode::Power:
      return "Power";
    case KeyCode::KP_Equals:
      return "KP_Equals";
    case KeyCode::F13:
      return "F13";
    case KeyCode::F14:
      return "F14";
    case KeyCode::F15:
      return "F15";
    case KeyCode::F16:
      return "F16";
    case KeyCode::F17:
      return "F17";
    case KeyCode::F18:
      return "F18";
    case KeyCode::F19:
      return "F19";
    case KeyCode::F20:
      return "F20";
    case KeyCode::F21:
      return "F21";
    case KeyCode::F22:
      return "F22";
    case KeyCode::F23:
      return "F23";
    case KeyCode::F24:
      return "F24";
    case KeyCode::Execute:
      return "Execute";
    case KeyCode::Help:
      return "Help";
    case KeyCode::Menu:
      return "Menu";
    case KeyCode::Select:
      return "Select";
    case KeyCode::Stop:
      return "Stop";
    case KeyCode::Again:
      return "Again";
    case KeyCode::Undo:
      return "Undo";
    case KeyCode::Cut:
      return "Cut";
    case KeyCode::Copy:
      return "Copy";
    case KeyCode::Paste:
      return "Paste";
    case KeyCode::Find:
      return "Find";
    case KeyCode::Mute:
      return "Mute";
    case KeyCode::VolumeUp:
      return "VolumeUp";
    case KeyCode::VolumeDown:
      return "VolumeDown";
    case KeyCode::KP_Comma:
      return "KP_Comma";
    case KeyCode::KP_EqualSas400:
      return "KP_EqualSas400";
    case KeyCode::International1:
      return "International1";
    case KeyCode::International2:
      return "International2";
    case KeyCode::International3:
      return "International3";
    case KeyCode::International4:
      return "International4";
    case KeyCode::International5:
      return "International5";
    case KeyCode::International6:
      return "International6";
    case KeyCode::International7:
      return "International7";
    case KeyCode::International8:
      return "International8";
    case KeyCode::International9:
      return "International9";
    case KeyCode::Lang1:
      return "Lang1";
    case KeyCode::Lang2:
      return "Lang2";
    case KeyCode::Lang3:
      return "Lang3";
    case KeyCode::Lang4:
      return "Lang4";
    case KeyCode::Lang5:
      return "Lang5";
    case KeyCode::Lang6:
      return "Lang6";
    case KeyCode::Lang7:
      return "Lang7";
    case KeyCode::Lang8:
      return "Lang8";
    case KeyCode::Lang9:
      return "Lang9";
    case KeyCode::AltErase:
      return "AltErase";
    case KeyCode::SysReq:
      return "SysReq";
    case KeyCode::Cancel:
      return "Cancel";
    case KeyCode::Clear:
      return "Clear";
    case KeyCode::Prior:
      return "Prior";
    case KeyCode::Return2:
      return "Return2";
    case KeyCode::Separator:
      return "Separator";
    case KeyCode::Out:
      return "Out";
    case KeyCode::Oper:
      return "Oper";
    case KeyCode::ClearAgain:
      return "ClearAgain";
    case KeyCode::CrSel:
      return "CrSel";
    case KeyCode::ExSel:
      return "ExSel";
    case KeyCode::Kp_00:
      return "Kp_00";
    case KeyCode::Kp_000:
      return "Kp_000";
    case KeyCode::ThousandsSeparator:
      return "ThousandsSeparator";
    case KeyCode::DecimalSeparator:
      return "DecimalSeparator";
    case KeyCode::CurrencyUnit:
      return "CurrencyUnit";
    case KeyCode::CurrencySubunit:
      return "CurrencySubunit";
    case KeyCode::KP_LeftParen:
      return "KP_LeftParen";
    case KeyCode::KP_RightParen:
      return "KP_RightParen";
    case KeyCode::KP_LeftBrace:
      return "KP_LeftBrace";
    case KeyCode::KP_RightBrace:
      return "KP_RightBrace";
    case KeyCode::KP_tab:
      return "KP_tab";
    case KeyCode::KP_backspace:
      return "KP_backspace";
    case KeyCode::KP_a:
      return "KP_a";
    case KeyCode::KP_b:
      return "KP_b";
    case KeyCode::KP_c:
      return "KP_c";
    case KeyCode::KP_d:
      return "KP_d";
    case KeyCode::KP_e:
      return "KP_e";
    case KeyCode::Kp_f:
      return "Kp_f";
    case KeyCode::KP_Xor:
      return "KP_Xor";
    case KeyCode::KP_Power:
      return "KP_Power";
    case KeyCode::KP_Percent:
      return "KP_Percent";
    case KeyCode::KP_Less:
      return "KP_Less";
    case KeyCode::KP_Greater:
      return "KP_Greater";
    case KeyCode::KP_Ampersand:
      return "KP_Ampersand";
    case KeyCode::KP_DblAmpersand:
      return "KP_DblAmpersand";
    case KeyCode::KP_VerticalBar:
      return "KP_VerticalBar";
    case KeyCode::KP_DblVerticalBar:
      return "KP_DblVerticalBar";
    case KeyCode::KP_Colon:
      return "KP_Colon";
    case KeyCode::KP_Hash:
      return "KP_Hash";
    case KeyCode::KP_Space:
      return "KP_Space";
    case KeyCode::KP_At:
      return "KP_At";
    case KeyCode::KP_Exclam:
      return "KP_Exclam";
    case KeyCode::KP_MemStore:
      return "KP_MemStore";
    case KeyCode::KP_MemRecall:
      return "KP_MemRecall";
    case KeyCode::KP_MemClear:
      return "KP_MemClear";
    case KeyCode::KP_MemAdd:
      return "KP_MemAdd";
    case KeyCode::KP_MemSubtract:
      return "KP_MemSubtract";
    case KeyCode::KP_MemMultiply:
      return "KP_MemMultiply";
    case KeyCode::KP_MemDivide:
      return "KP_MemDivide";
    case KeyCode::KP_PlusMinus:
      return "KP_PlusMinus";
    case KeyCode::KP_Clear:
      return "KP_Clear";
    case KeyCode::KP_ClearEntry:
      return "KP_ClearEntry";
    case KeyCode::KP_Binary:
      return "KP_Binary";
    case KeyCode::KP_Octal:
      return "KP_Octal";
    case KeyCode::KP_Decimal:
      return "KP_Decimal";
    case KeyCode::KP_Hexadecimal:
      return "KP_Hexadecimal";
    case KeyCode::LCtrl:
      return "LCtrl";
    case KeyCode::LShift:
      return "LShift";
    case KeyCode::LAlt:
      return "LAlt";
    case KeyCode::LGui:
      return "LGui";
    case KeyCode::RCtrl:
      return "RCtrl";
    case KeyCode::RShift:
      return "RShift";
    case KeyCode::RAlt:
      return "RAlt";
    case KeyCode::RGui:
      return "RGui";
    case KeyCode::Mode:
      return "Mode";
    case KeyCode::AudioNext:
      return "AudioNext";
    case KeyCode::AudioPrev:
      return "AudioPrev";
    case KeyCode::AudioStop:
      return "AudioStop";
    case KeyCode::AudioPlay:
      return "AudioPlay";
    case KeyCode::AudioMute:
      return "AudioMute";
    case KeyCode::MediaSelect:
      return "MediaSelect";
    case KeyCode::WWW:
      return "WWW";
    case KeyCode::Mail:
      return "Mail";
    case KeyCode::Calculator:
      return "Calculator";
    case KeyCode::Computer:
      return "Computer";
    case KeyCode::AC_Search:
      return "AC_Search";
    case KeyCode::AC_Home:
      return "AC_Home";
    case KeyCode::AC_Back:
      return "AC_Back";
    case KeyCode::AC_Forward:
      return "AC_Forward";
    case KeyCode::AC_Stop:
      return "AC_Stop";
    case KeyCode::AC_Refresh:
      return "AC_Refresh";
    case KeyCode::AC_Bookmarks:
      return "AC_Bookmarks";
    case KeyCode::BrightnessDown:
      return "BrightnessDown";
    case KeyCode::BrightnessUp:
      return "BrightnessUp";
    case KeyCode::DisplaySwitch:
      return "DisplaySwitch";
    case KeyCode::KbdIlluminationToggle:
      return "KbdIlluminationToggle";
    case KeyCode::KbdIlluminationDown:
      return "KbdIlluminationDown";
    case KeyCode::KbdIlluminationUp:
      return "KbdIlluminationUp";
    case KeyCode::Eject:
      return "Eject";
    case KeyCode::Sleep:
      return "Sleep";
    case KeyCode::App1:
      return "App1";
    case KeyCode::App2:
      return "App2";
    case KeyCode::AudioRewind:
      return "AudioRewind";
    case KeyCode::AudioFastForward:
      return "AudioFastForward";
    default:
      VAN_DEBUGBREAK;
      VAN_ENGINE_ASSERT(false, "Unknown keyboard KeyCode enum!");
      return "Unknown";
  }
}
KeyCode fromString(const std::string &value) {
  size_t hash = hashString(value);

  switch (hash) {
    case "Unknown"_hash:
      return KeyCode::Unknown;
    case "A"_hash:
      return KeyCode::A;
    case "B"_hash:
      return KeyCode::B;
    case "C"_hash:
      return KeyCode::C;
    case "D"_hash:
      return KeyCode::D;
    case "E"_hash:
      return KeyCode::E;
    case "F"_hash:
      return KeyCode::F;
    case "G"_hash:
      return KeyCode::G;
    case "H"_hash:
      return KeyCode::H;
    case "I"_hash:
      return KeyCode::I;
    case "J"_hash:
      return KeyCode::J;
    case "K"_hash:
      return KeyCode::K;
    case "L"_hash:
      return KeyCode::L;
    case "M"_hash:
      return KeyCode::M;
    case "N"_hash:
      return KeyCode::N;
    case "O"_hash:
      return KeyCode::O;
    case "P"_hash:
      return KeyCode::P;
    case "Q"_hash:
      return KeyCode::Q;
    case "R"_hash:
      return KeyCode::R;
    case "S"_hash:
      return KeyCode::S;
    case "T"_hash:
      return KeyCode::T;
    case "U"_hash:
      return KeyCode::U;
    case "V"_hash:
      return KeyCode::V;
    case "W"_hash:
      return KeyCode::W;
    case "X"_hash:
      return KeyCode::X;
    case "Y"_hash:
      return KeyCode::Y;
    case "Z"_hash:
      return KeyCode::Z;
    case "Num_1"_hash:
      return KeyCode::Num_1;
    case "Num_2"_hash:
      return KeyCode::Num_2;
    case "Num_3"_hash:
      return KeyCode::Num_3;
    case "Num_4"_hash:
      return KeyCode::Num_4;
    case "Num_5"_hash:
      return KeyCode::Num_5;
    case "Num_6"_hash:
      return KeyCode::Num_6;
    case "Num_7"_hash:
      return KeyCode::Num_7;
    case "Num_8"_hash:
      return KeyCode::Num_8;
    case "Num_9"_hash:
      return KeyCode::Num_9;
    case "Num_0"_hash:
      return KeyCode::Num_0;
    case "Return"_hash:
      return KeyCode::Return;
    case "Escape"_hash:
      return KeyCode::Escape;
    case "Backspace"_hash:
      return KeyCode::Backspace;
    case "Tab"_hash:
      return KeyCode::Tab;
    case "Space"_hash:
      return KeyCode::Space;
    case "Minus"_hash:
      return KeyCode::Minus;
    case "Equals"_hash:
      return KeyCode::Equals;
    case "LeftBracket"_hash:
      return KeyCode::LeftBracket;
    case "RightBracket"_hash:
      return KeyCode::RightBracket;
    case "Backslash"_hash:
      return KeyCode::Backslash;
    case "Semicolon"_hash:
      return KeyCode::Semicolon;
    case "Apostrophe"_hash:
      return KeyCode::Apostrophe;
    case "Grave"_hash:
      return KeyCode::Grave;
    case "Comma"_hash:
      return KeyCode::Comma;
    case "Period"_hash:
      return KeyCode::Period;
    case "Slash"_hash:
      return KeyCode::Slash;
    case "Capslock"_hash:
      return KeyCode::Capslock;
    case "F1"_hash:
      return KeyCode::F1;
    case "F2"_hash:
      return KeyCode::F2;
    case "F3"_hash:
      return KeyCode::F3;
    case "F4"_hash:
      return KeyCode::F4;
    case "F5"_hash:
      return KeyCode::F5;
    case "F6"_hash:
      return KeyCode::F6;
    case "F7"_hash:
      return KeyCode::F7;
    case "F8"_hash:
      return KeyCode::F8;
    case "F9"_hash:
      return KeyCode::F9;
    case "F10"_hash:
      return KeyCode::F10;
    case "F11"_hash:
      return KeyCode::F11;
    case "F12"_hash:
      return KeyCode::F12;
    case "PrintScreen"_hash:
      return KeyCode::PrintScreen;
    case "ScrollLock"_hash:
      return KeyCode::ScrollLock;
    case "Pause"_hash:
      return KeyCode::Pause;
    case "Insert"_hash:
      return KeyCode::Insert;
    case "Home"_hash:
      return KeyCode::Home;
    case "PageUp"_hash:
      return KeyCode::PageUp;
    case "Delete"_hash:
      return KeyCode::Delete;
    case "End"_hash:
      return KeyCode::End;
    case "PageDown"_hash:
      return KeyCode::PageDown;
    case "Right"_hash:
      return KeyCode::Right;
    case "Left"_hash:
      return KeyCode::Left;
    case "Down"_hash:
      return KeyCode::Down;
    case "Up"_hash:
      return KeyCode::Up;
    case "NumLock"_hash:
      return KeyCode::NumLock;
    case "KP_Divide"_hash:
      return KeyCode::KP_Divide;
    case "KP_Multiply"_hash:
      return KeyCode::KP_Multiply;
    case "KP_Minus"_hash:
      return KeyCode::KP_Minus;
    case "KP_Plus"_hash:
      return KeyCode::KP_Plus;
    case "KP_Enter"_hash:
      return KeyCode::KP_Enter;
    case "KP_1"_hash:
      return KeyCode::KP_1;
    case "KP_2"_hash:
      return KeyCode::KP_2;
    case "KP_3"_hash:
      return KeyCode::KP_3;
    case "KP_4"_hash:
      return KeyCode::KP_4;
    case "KP_5"_hash:
      return KeyCode::KP_5;
    case "KP_6"_hash:
      return KeyCode::KP_6;
    case "KP_7"_hash:
      return KeyCode::KP_7;
    case "KP_8"_hash:
      return KeyCode::KP_8;
    case "KP_9"_hash:
      return KeyCode::KP_9;
    case "KP_0"_hash:
      return KeyCode::KP_0;
    case "KP_Period"_hash:
      return KeyCode::KP_Period;
    case "Application"_hash:
      return KeyCode::Application;
    case "Power"_hash:
      return KeyCode::Power;
    case "KP_Equals"_hash:
      return KeyCode::KP_Equals;
    case "F13"_hash:
      return KeyCode::F13;
    case "F14"_hash:
      return KeyCode::F14;
    case "F15"_hash:
      return KeyCode::F15;
    case "F16"_hash:
      return KeyCode::F16;
    case "F17"_hash:
      return KeyCode::F17;
    case "F18"_hash:
      return KeyCode::F18;
    case "F19"_hash:
      return KeyCode::F19;
    case "F20"_hash:
      return KeyCode::F20;
    case "F21"_hash:
      return KeyCode::F21;
    case "F22"_hash:
      return KeyCode::F22;
    case "F23"_hash:
      return KeyCode::F23;
    case "F24"_hash:
      return KeyCode::F24;
    case "Execute"_hash:
      return KeyCode::Execute;
    case "Help"_hash:
      return KeyCode::Help;
    case "Menu"_hash:
      return KeyCode::Menu;
    case "Select"_hash:
      return KeyCode::Select;
    case "Stop"_hash:
      return KeyCode::Stop;
    case "Again"_hash:
      return KeyCode::Again;
    case "Undo"_hash:
      return KeyCode::Undo;
    case "Cut"_hash:
      return KeyCode::Cut;
    case "Copy"_hash:
      return KeyCode::Copy;
    case "Paste"_hash:
      return KeyCode::Paste;
    case "Find"_hash:
      return KeyCode::Find;
    case "Mute"_hash:
      return KeyCode::Mute;
    case "VolumeUp"_hash:
      return KeyCode::VolumeUp;
    case "VolumeDown"_hash:
      return KeyCode::VolumeDown;
    case "KP_Comma"_hash:
      return KeyCode::KP_Comma;
    case "KP_EqualSas400"_hash:
      return KeyCode::KP_EqualSas400;
    case "International1"_hash:
      return KeyCode::International1;
    case "International2"_hash:
      return KeyCode::International2;
    case "International3"_hash:
      return KeyCode::International3;
    case "International4"_hash:
      return KeyCode::International4;
    case "International5"_hash:
      return KeyCode::International5;
    case "International6"_hash:
      return KeyCode::International6;
    case "International7"_hash:
      return KeyCode::International7;
    case "International8"_hash:
      return KeyCode::International8;
    case "International9"_hash:
      return KeyCode::International9;
    case "Lang1"_hash:
      return KeyCode::Lang1;
    case "Lang2"_hash:
      return KeyCode::Lang2;
    case "Lang3"_hash:
      return KeyCode::Lang3;
    case "Lang4"_hash:
      return KeyCode::Lang4;
    case "Lang5"_hash:
      return KeyCode::Lang5;
    case "Lang6"_hash:
      return KeyCode::Lang6;
    case "Lang7"_hash:
      return KeyCode::Lang7;
    case "Lang8"_hash:
      return KeyCode::Lang8;
    case "Lang9"_hash:
      return KeyCode::Lang9;
    case "AltErase"_hash:
      return KeyCode::AltErase;
    case "SysReq"_hash:
      return KeyCode::SysReq;
    case "Cancel"_hash:
      return KeyCode::Cancel;
    case "Clear"_hash:
      return KeyCode::Clear;
    case "Prior"_hash:
      return KeyCode::Prior;
    case "Return2"_hash:
      return KeyCode::Return2;
    case "Separator"_hash:
      return KeyCode::Separator;
    case "Out"_hash:
      return KeyCode::Out;
    case "Oper"_hash:
      return KeyCode::Oper;
    case "ClearAgain"_hash:
      return KeyCode::ClearAgain;
    case "CrSel"_hash:
      return KeyCode::CrSel;
    case "ExSel"_hash:
      return KeyCode::ExSel;
    case "Kp_00"_hash:
      return KeyCode::Kp_00;
    case "Kp_000"_hash:
      return KeyCode::Kp_000;
    case "ThousandsSeparator"_hash:
      return KeyCode::ThousandsSeparator;
    case "DecimalSeparator"_hash:
      return KeyCode::DecimalSeparator;
    case "CurrencyUnit"_hash:
      return KeyCode::CurrencyUnit;
    case "CurrencySubunit"_hash:
      return KeyCode::CurrencySubunit;
    case "KP_LeftParen"_hash:
      return KeyCode::KP_LeftParen;
    case "KP_RightParen"_hash:
      return KeyCode::KP_RightParen;
    case "KP_LeftBrace"_hash:
      return KeyCode::KP_LeftBrace;
    case "KP_RightBrace"_hash:
      return KeyCode::KP_RightBrace;
    case "KP_tab"_hash:
      return KeyCode::KP_tab;
    case "KP_backspace"_hash:
      return KeyCode::KP_backspace;
    case "KP_a"_hash:
      return KeyCode::KP_a;
    case "KP_b"_hash:
      return KeyCode::KP_b;
    case "KP_c"_hash:
      return KeyCode::KP_c;
    case "KP_d"_hash:
      return KeyCode::KP_d;
    case "KP_e"_hash:
      return KeyCode::KP_e;
    case "Kp_f"_hash:
      return KeyCode::Kp_f;
    case "KP_Xor"_hash:
      return KeyCode::KP_Xor;
    case "KP_Power"_hash:
      return KeyCode::KP_Power;
    case "KP_Percent"_hash:
      return KeyCode::KP_Percent;
    case "KP_Less"_hash:
      return KeyCode::KP_Less;
    case "KP_Greater"_hash:
      return KeyCode::KP_Greater;
    case "KP_Ampersand"_hash:
      return KeyCode::KP_Ampersand;
    case "KP_DblAmpersand"_hash:
      return KeyCode::KP_DblAmpersand;
    case "KP_VerticalBar"_hash:
      return KeyCode::KP_VerticalBar;
    case "KP_DblVerticalBar"_hash:
      return KeyCode::KP_DblVerticalBar;
    case "KP_Colon"_hash:
      return KeyCode::KP_Colon;
    case "KP_Hash"_hash:
      return KeyCode::KP_Hash;
    case "KP_Space"_hash:
      return KeyCode::KP_Space;
    case "KP_At"_hash:
      return KeyCode::KP_At;
    case "KP_Exclam"_hash:
      return KeyCode::KP_Exclam;
    case "KP_MemStore"_hash:
      return KeyCode::KP_MemStore;
    case "KP_MemRecall"_hash:
      return KeyCode::KP_MemRecall;
    case "KP_MemClear"_hash:
      return KeyCode::KP_MemClear;
    case "KP_MemAdd"_hash:
      return KeyCode::KP_MemAdd;
    case "KP_MemSubtract"_hash:
      return KeyCode::KP_MemSubtract;
    case "KP_MemMultiply"_hash:
      return KeyCode::KP_MemMultiply;
    case "KP_MemDivide"_hash:
      return KeyCode::KP_MemDivide;
    case "KP_PlusMinus"_hash:
      return KeyCode::KP_PlusMinus;
    case "KP_Clear"_hash:
      return KeyCode::KP_Clear;
    case "KP_ClearEntry"_hash:
      return KeyCode::KP_ClearEntry;
    case "KP_Binary"_hash:
      return KeyCode::KP_Binary;
    case "KP_Octal"_hash:
      return KeyCode::KP_Octal;
    case "KP_Decimal"_hash:
      return KeyCode::KP_Decimal;
    case "KP_Hexadecimal"_hash:
      return KeyCode::KP_Hexadecimal;
    case "LCtrl"_hash:
      return KeyCode::LCtrl;
    case "LShift"_hash:
      return KeyCode::LShift;
    case "LAlt"_hash:
      return KeyCode::LAlt;
    case "LGui"_hash:
      return KeyCode::LGui;
    case "RCtrl"_hash:
      return KeyCode::RCtrl;
    case "RShift"_hash:
      return KeyCode::RShift;
    case "RAlt"_hash:
      return KeyCode::RAlt;
    case "RGui"_hash:
      return KeyCode::RGui;
    case "Mode"_hash:
      return KeyCode::Mode;
    case "AudioNext"_hash:
      return KeyCode::AudioNext;
    case "AudioPrev"_hash:
      return KeyCode::AudioPrev;
    case "AudioStop"_hash:
      return KeyCode::AudioStop;
    case "AudioPlay"_hash:
      return KeyCode::AudioPlay;
    case "AudioMute"_hash:
      return KeyCode::AudioMute;
    case "MediaSelect"_hash:
      return KeyCode::MediaSelect;
    case "WWW"_hash:
      return KeyCode::WWW;
    case "Mail"_hash:
      return KeyCode::Mail;
    case "Calculator"_hash:
      return KeyCode::Calculator;
    case "Computer"_hash:
      return KeyCode::Computer;
    case "AC_Search"_hash:
      return KeyCode::AC_Search;
    case "AC_Home"_hash:
      return KeyCode::AC_Home;
    case "AC_Back"_hash:
      return KeyCode::AC_Back;
    case "AC_Forward"_hash:
      return KeyCode::AC_Forward;
    case "AC_Stop"_hash:
      return KeyCode::AC_Stop;
    case "AC_Refresh"_hash:
      return KeyCode::AC_Refresh;
    case "AC_Bookmarks"_hash:
      return KeyCode::AC_Bookmarks;
    case "BrightnessDown"_hash:
      return KeyCode::BrightnessDown;
    case "BrightnessUp"_hash:
      return KeyCode::BrightnessUp;
    case "DisplaySwitch"_hash:
      return KeyCode::DisplaySwitch;
    case "KbdIlluminationToggle"_hash:
      return KeyCode::KbdIlluminationToggle;
    case "KbdIlluminationDown"_hash:
      return KeyCode::KbdIlluminationDown;
    case "KbdIlluminationUp"_hash:
      return KeyCode::KbdIlluminationUp;
    case "Eject"_hash:
      return KeyCode::Eject;
    case "Sleep"_hash:
      return KeyCode::Sleep;
    case "App1"_hash:
      return KeyCode::App1;
    case "App2"_hash:
      return KeyCode::App2;
    case "AudioRewind"_hash:
      return KeyCode::AudioRewind;
    case "AudioFastForward"_hash:
      return KeyCode::AudioFastForward;
    default:
      VAN_DEBUGBREAK;
      VAN_ENGINE_ASSERT(false, "Unknown keyboard KeyCode string!");
      return KeyCode::Unknown;
  }
}

KeyCode fromInt(int value) {
  switch (value) {
    case (int)KeyCode::Unknown:
      return KeyCode::Unknown;
    case (int)KeyCode::A:
      return KeyCode::A;
    case (int)KeyCode::B:
      return KeyCode::B;
    case (int)KeyCode::C:
      return KeyCode::C;
    case (int)KeyCode::D:
      return KeyCode::D;
    case (int)KeyCode::E:
      return KeyCode::E;
    case (int)KeyCode::F:
      return KeyCode::F;
    case (int)KeyCode::G:
      return KeyCode::G;
    case (int)KeyCode::H:
      return KeyCode::H;
    case (int)KeyCode::I:
      return KeyCode::I;
    case (int)KeyCode::J:
      return KeyCode::J;
    case (int)KeyCode::K:
      return KeyCode::K;
    case (int)KeyCode::L:
      return KeyCode::L;
    case (int)KeyCode::M:
      return KeyCode::M;
    case (int)KeyCode::N:
      return KeyCode::N;
    case (int)KeyCode::O:
      return KeyCode::O;
    case (int)KeyCode::P:
      return KeyCode::P;
    case (int)KeyCode::Q:
      return KeyCode::Q;
    case (int)KeyCode::R:
      return KeyCode::R;
    case (int)KeyCode::S:
      return KeyCode::S;
    case (int)KeyCode::T:
      return KeyCode::T;
    case (int)KeyCode::U:
      return KeyCode::U;
    case (int)KeyCode::V:
      return KeyCode::V;
    case (int)KeyCode::W:
      return KeyCode::W;
    case (int)KeyCode::X:
      return KeyCode::X;
    case (int)KeyCode::Y:
      return KeyCode::Y;
    case (int)KeyCode::Z:
      return KeyCode::Z;
    case (int)KeyCode::Num_1:
      return KeyCode::Num_1;
    case (int)KeyCode::Num_2:
      return KeyCode::Num_2;
    case (int)KeyCode::Num_3:
      return KeyCode::Num_3;
    case (int)KeyCode::Num_4:
      return KeyCode::Num_4;
    case (int)KeyCode::Num_5:
      return KeyCode::Num_5;
    case (int)KeyCode::Num_6:
      return KeyCode::Num_6;
    case (int)KeyCode::Num_7:
      return KeyCode::Num_7;
    case (int)KeyCode::Num_8:
      return KeyCode::Num_8;
    case (int)KeyCode::Num_9:
      return KeyCode::Num_9;
    case (int)KeyCode::Num_0:
      return KeyCode::Num_0;
    case (int)KeyCode::Return:
      return KeyCode::Return;
    case (int)KeyCode::Escape:
      return KeyCode::Escape;
    case (int)KeyCode::Backspace:
      return KeyCode::Backspace;
    case (int)KeyCode::Tab:
      return KeyCode::Tab;
    case (int)KeyCode::Space:
      return KeyCode::Space;
    case (int)KeyCode::Minus:
      return KeyCode::Minus;
    case (int)KeyCode::Equals:
      return KeyCode::Equals;
    case (int)KeyCode::LeftBracket:
      return KeyCode::LeftBracket;
    case (int)KeyCode::RightBracket:
      return KeyCode::RightBracket;
    case (int)KeyCode::Backslash:
      return KeyCode::Backslash;
    case (int)KeyCode::Semicolon:
      return KeyCode::Semicolon;
    case (int)KeyCode::Apostrophe:
      return KeyCode::Apostrophe;
    case (int)KeyCode::Grave:
      return KeyCode::Grave;
    case (int)KeyCode::Comma:
      return KeyCode::Comma;
    case (int)KeyCode::Period:
      return KeyCode::Period;
    case (int)KeyCode::Slash:
      return KeyCode::Slash;
    case (int)KeyCode::Capslock:
      return KeyCode::Capslock;
    case (int)KeyCode::F1:
      return KeyCode::F1;
    case (int)KeyCode::F2:
      return KeyCode::F2;
    case (int)KeyCode::F3:
      return KeyCode::F3;
    case (int)KeyCode::F4:
      return KeyCode::F4;
    case (int)KeyCode::F5:
      return KeyCode::F5;
    case (int)KeyCode::F6:
      return KeyCode::F6;
    case (int)KeyCode::F7:
      return KeyCode::F7;
    case (int)KeyCode::F8:
      return KeyCode::F8;
    case (int)KeyCode::F9:
      return KeyCode::F9;
    case (int)KeyCode::F10:
      return KeyCode::F10;
    case (int)KeyCode::F11:
      return KeyCode::F11;
    case (int)KeyCode::F12:
      return KeyCode::F12;
    case (int)KeyCode::PrintScreen:
      return KeyCode::PrintScreen;
    case (int)KeyCode::ScrollLock:
      return KeyCode::ScrollLock;
    case (int)KeyCode::Pause:
      return KeyCode::Pause;
    case (int)KeyCode::Insert:
      return KeyCode::Insert;
    case (int)KeyCode::Home:
      return KeyCode::Home;
    case (int)KeyCode::PageUp:
      return KeyCode::PageUp;
    case (int)KeyCode::Delete:
      return KeyCode::Delete;
    case (int)KeyCode::End:
      return KeyCode::End;
    case (int)KeyCode::PageDown:
      return KeyCode::PageDown;
    case (int)KeyCode::Right:
      return KeyCode::Right;
    case (int)KeyCode::Left:
      return KeyCode::Left;
    case (int)KeyCode::Down:
      return KeyCode::Down;
    case (int)KeyCode::Up:
      return KeyCode::Up;
    case (int)KeyCode::NumLock:
      return KeyCode::NumLock;
    case (int)KeyCode::KP_Divide:
      return KeyCode::KP_Divide;
    case (int)KeyCode::KP_Multiply:
      return KeyCode::KP_Multiply;
    case (int)KeyCode::KP_Minus:
      return KeyCode::KP_Minus;
    case (int)KeyCode::KP_Plus:
      return KeyCode::KP_Plus;
    case (int)KeyCode::KP_Enter:
      return KeyCode::KP_Enter;
    case (int)KeyCode::KP_1:
      return KeyCode::KP_1;
    case (int)KeyCode::KP_2:
      return KeyCode::KP_2;
    case (int)KeyCode::KP_3:
      return KeyCode::KP_3;
    case (int)KeyCode::KP_4:
      return KeyCode::KP_4;
    case (int)KeyCode::KP_5:
      return KeyCode::KP_5;
    case (int)KeyCode::KP_6:
      return KeyCode::KP_6;
    case (int)KeyCode::KP_7:
      return KeyCode::KP_7;
    case (int)KeyCode::KP_8:
      return KeyCode::KP_8;
    case (int)KeyCode::KP_9:
      return KeyCode::KP_9;
    case (int)KeyCode::KP_0:
      return KeyCode::KP_0;
    case (int)KeyCode::KP_Period:
      return KeyCode::KP_Period;
    case (int)KeyCode::Application:
      return KeyCode::Application;
    case (int)KeyCode::Power:
      return KeyCode::Power;
    case (int)KeyCode::KP_Equals:
      return KeyCode::KP_Equals;
    case (int)KeyCode::F13:
      return KeyCode::F13;
    case (int)KeyCode::F14:
      return KeyCode::F14;
    case (int)KeyCode::F15:
      return KeyCode::F15;
    case (int)KeyCode::F16:
      return KeyCode::F16;
    case (int)KeyCode::F17:
      return KeyCode::F17;
    case (int)KeyCode::F18:
      return KeyCode::F18;
    case (int)KeyCode::F19:
      return KeyCode::F19;
    case (int)KeyCode::F20:
      return KeyCode::F20;
    case (int)KeyCode::F21:
      return KeyCode::F21;
    case (int)KeyCode::F22:
      return KeyCode::F22;
    case (int)KeyCode::F23:
      return KeyCode::F23;
    case (int)KeyCode::F24:
      return KeyCode::F24;
    case (int)KeyCode::Execute:
      return KeyCode::Execute;
    case (int)KeyCode::Help:
      return KeyCode::Help;
    case (int)KeyCode::Menu:
      return KeyCode::Menu;
    case (int)KeyCode::Select:
      return KeyCode::Select;
    case (int)KeyCode::Stop:
      return KeyCode::Stop;
    case (int)KeyCode::Again:
      return KeyCode::Again;
    case (int)KeyCode::Undo:
      return KeyCode::Undo;
    case (int)KeyCode::Cut:
      return KeyCode::Cut;
    case (int)KeyCode::Copy:
      return KeyCode::Copy;
    case (int)KeyCode::Paste:
      return KeyCode::Paste;
    case (int)KeyCode::Find:
      return KeyCode::Find;
    case (int)KeyCode::Mute:
      return KeyCode::Mute;
    case (int)KeyCode::VolumeUp:
      return KeyCode::VolumeUp;
    case (int)KeyCode::VolumeDown:
      return KeyCode::VolumeDown;
    case (int)KeyCode::KP_Comma:
      return KeyCode::KP_Comma;
    case (int)KeyCode::KP_EqualSas400:
      return KeyCode::KP_EqualSas400;
    case (int)KeyCode::International1:
      return KeyCode::International1;
    case (int)KeyCode::International2:
      return KeyCode::International2;
    case (int)KeyCode::International3:
      return KeyCode::International3;
    case (int)KeyCode::International4:
      return KeyCode::International4;
    case (int)KeyCode::International5:
      return KeyCode::International5;
    case (int)KeyCode::International6:
      return KeyCode::International6;
    case (int)KeyCode::International7:
      return KeyCode::International7;
    case (int)KeyCode::International8:
      return KeyCode::International8;
    case (int)KeyCode::International9:
      return KeyCode::International9;
    case (int)KeyCode::Lang1:
      return KeyCode::Lang1;
    case (int)KeyCode::Lang2:
      return KeyCode::Lang2;
    case (int)KeyCode::Lang3:
      return KeyCode::Lang3;
    case (int)KeyCode::Lang4:
      return KeyCode::Lang4;
    case (int)KeyCode::Lang5:
      return KeyCode::Lang5;
    case (int)KeyCode::Lang6:
      return KeyCode::Lang6;
    case (int)KeyCode::Lang7:
      return KeyCode::Lang7;
    case (int)KeyCode::Lang8:
      return KeyCode::Lang8;
    case (int)KeyCode::Lang9:
      return KeyCode::Lang9;
    case (int)KeyCode::AltErase:
      return KeyCode::AltErase;
    case (int)KeyCode::SysReq:
      return KeyCode::SysReq;
    case (int)KeyCode::Cancel:
      return KeyCode::Cancel;
    case (int)KeyCode::Clear:
      return KeyCode::Clear;
    case (int)KeyCode::Prior:
      return KeyCode::Prior;
    case (int)KeyCode::Return2:
      return KeyCode::Return2;
    case (int)KeyCode::Separator:
      return KeyCode::Separator;
    case (int)KeyCode::Out:
      return KeyCode::Out;
    case (int)KeyCode::Oper:
      return KeyCode::Oper;
    case (int)KeyCode::ClearAgain:
      return KeyCode::ClearAgain;
    case (int)KeyCode::CrSel:
      return KeyCode::CrSel;
    case (int)KeyCode::ExSel:
      return KeyCode::ExSel;
    case (int)KeyCode::Kp_00:
      return KeyCode::Kp_00;
    case (int)KeyCode::Kp_000:
      return KeyCode::Kp_000;
    case (int)KeyCode::ThousandsSeparator:
      return KeyCode::ThousandsSeparator;
    case (int)KeyCode::DecimalSeparator:
      return KeyCode::DecimalSeparator;
    case (int)KeyCode::CurrencyUnit:
      return KeyCode::CurrencyUnit;
    case (int)KeyCode::CurrencySubunit:
      return KeyCode::CurrencySubunit;
    case (int)KeyCode::KP_LeftParen:
      return KeyCode::KP_LeftParen;
    case (int)KeyCode::KP_RightParen:
      return KeyCode::KP_RightParen;
    case (int)KeyCode::KP_LeftBrace:
      return KeyCode::KP_LeftBrace;
    case (int)KeyCode::KP_RightBrace:
      return KeyCode::KP_RightBrace;
    case (int)KeyCode::KP_tab:
      return KeyCode::KP_tab;
    case (int)KeyCode::KP_backspace:
      return KeyCode::KP_backspace;
    case (int)KeyCode::KP_a:
      return KeyCode::KP_a;
    case (int)KeyCode::KP_b:
      return KeyCode::KP_b;
    case (int)KeyCode::KP_c:
      return KeyCode::KP_c;
    case (int)KeyCode::KP_d:
      return KeyCode::KP_d;
    case (int)KeyCode::KP_e:
      return KeyCode::KP_e;
    case (int)KeyCode::Kp_f:
      return KeyCode::Kp_f;
    case (int)KeyCode::KP_Xor:
      return KeyCode::KP_Xor;
    case (int)KeyCode::KP_Power:
      return KeyCode::KP_Power;
    case (int)KeyCode::KP_Percent:
      return KeyCode::KP_Percent;
    case (int)KeyCode::KP_Less:
      return KeyCode::KP_Less;
    case (int)KeyCode::KP_Greater:
      return KeyCode::KP_Greater;
    case (int)KeyCode::KP_Ampersand:
      return KeyCode::KP_Ampersand;
    case (int)KeyCode::KP_DblAmpersand:
      return KeyCode::KP_DblAmpersand;
    case (int)KeyCode::KP_VerticalBar:
      return KeyCode::KP_VerticalBar;
    case (int)KeyCode::KP_DblVerticalBar:
      return KeyCode::KP_DblVerticalBar;
    case (int)KeyCode::KP_Colon:
      return KeyCode::KP_Colon;
    case (int)KeyCode::KP_Hash:
      return KeyCode::KP_Hash;
    case (int)KeyCode::KP_Space:
      return KeyCode::KP_Space;
    case (int)KeyCode::KP_At:
      return KeyCode::KP_At;
    case (int)KeyCode::KP_Exclam:
      return KeyCode::KP_Exclam;
    case (int)KeyCode::KP_MemStore:
      return KeyCode::KP_MemStore;
    case (int)KeyCode::KP_MemRecall:
      return KeyCode::KP_MemRecall;
    case (int)KeyCode::KP_MemClear:
      return KeyCode::KP_MemClear;
    case (int)KeyCode::KP_MemAdd:
      return KeyCode::KP_MemAdd;
    case (int)KeyCode::KP_MemSubtract:
      return KeyCode::KP_MemSubtract;
    case (int)KeyCode::KP_MemMultiply:
      return KeyCode::KP_MemMultiply;
    case (int)KeyCode::KP_MemDivide:
      return KeyCode::KP_MemDivide;
    case (int)KeyCode::KP_PlusMinus:
      return KeyCode::KP_PlusMinus;
    case (int)KeyCode::KP_Clear:
      return KeyCode::KP_Clear;
    case (int)KeyCode::KP_ClearEntry:
      return KeyCode::KP_ClearEntry;
    case (int)KeyCode::KP_Binary:
      return KeyCode::KP_Binary;
    case (int)KeyCode::KP_Octal:
      return KeyCode::KP_Octal;
    case (int)KeyCode::KP_Decimal:
      return KeyCode::KP_Decimal;
    case (int)KeyCode::KP_Hexadecimal:
      return KeyCode::KP_Hexadecimal;
    case (int)KeyCode::LCtrl:
      return KeyCode::LCtrl;
    case (int)KeyCode::LShift:
      return KeyCode::LShift;
    case (int)KeyCode::LAlt:
      return KeyCode::LAlt;
    case (int)KeyCode::LGui:
      return KeyCode::LGui;
    case (int)KeyCode::RCtrl:
      return KeyCode::RCtrl;
    case (int)KeyCode::RShift:
      return KeyCode::RShift;
    case (int)KeyCode::RAlt:
      return KeyCode::RAlt;
    case (int)KeyCode::RGui:
      return KeyCode::RGui;
    case (int)KeyCode::Mode:
      return KeyCode::Mode;
    case (int)KeyCode::AudioNext:
      return KeyCode::AudioNext;
    case (int)KeyCode::AudioPrev:
      return KeyCode::AudioPrev;
    case (int)KeyCode::AudioStop:
      return KeyCode::AudioStop;
    case (int)KeyCode::AudioPlay:
      return KeyCode::AudioPlay;
    case (int)KeyCode::AudioMute:
      return KeyCode::AudioMute;
    case (int)KeyCode::MediaSelect:
      return KeyCode::MediaSelect;
    case (int)KeyCode::WWW:
      return KeyCode::WWW;
    case (int)KeyCode::Mail:
      return KeyCode::Mail;
    case (int)KeyCode::Calculator:
      return KeyCode::Calculator;
    case (int)KeyCode::Computer:
      return KeyCode::Computer;
    case (int)KeyCode::AC_Search:
      return KeyCode::AC_Search;
    case (int)KeyCode::AC_Home:
      return KeyCode::AC_Home;
    case (int)KeyCode::AC_Back:
      return KeyCode::AC_Back;
    case (int)KeyCode::AC_Forward:
      return KeyCode::AC_Forward;
    case (int)KeyCode::AC_Stop:
      return KeyCode::AC_Stop;
    case (int)KeyCode::AC_Refresh:
      return KeyCode::AC_Refresh;
    case (int)KeyCode::AC_Bookmarks:
      return KeyCode::AC_Bookmarks;
    case (int)KeyCode::BrightnessDown:
      return KeyCode::BrightnessDown;
    case (int)KeyCode::BrightnessUp:
      return KeyCode::BrightnessUp;
    case (int)KeyCode::DisplaySwitch:
      return KeyCode::DisplaySwitch;
    case (int)KeyCode::KbdIlluminationToggle:
      return KeyCode::KbdIlluminationToggle;
    case (int)KeyCode::KbdIlluminationDown:
      return KeyCode::KbdIlluminationDown;
    case (int)KeyCode::KbdIlluminationUp:
      return KeyCode::KbdIlluminationUp;
    case (int)KeyCode::Eject:
      return KeyCode::Eject;
    case (int)KeyCode::Sleep:
      return KeyCode::Sleep;
    case (int)KeyCode::App1:
      return KeyCode::App1;
    case (int)KeyCode::App2:
      return KeyCode::App2;
    case (int)KeyCode::AudioRewind:
      return KeyCode::AudioRewind;
    case (int)KeyCode::AudioFastForward:
      return KeyCode::AudioFastForward;
    default:
      VAN_DEBUGBREAK;
      VAN_ENGINE_ASSERT(false, "Unknown keyboard KeyCode scancode!");
      return KeyCode::Unknown;
  }
}

}  // namespace vanadium::keyboard
